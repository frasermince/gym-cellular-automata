#!/usr/bin/env python
import argparse
import warnings
from pathlib import Path
from typing import Union

import gif
from gymnasium import Env, make
from gymnasium.error import NameNotFound
from matplotlib._api.deprecation import MatplotlibDeprecationWarning

import gym_cellular_automata as gymca

DEFAULT_UPDATES = 40
DEFAULT_MILISECOND_FRAME = 80


def get_make_frame(env: Env):
    env.reset()

    warnings.filterwarnings("ignore", category=MatplotlibDeprecationWarning)

    @gif.frame
    def make_frame():
        env.render()
        step_tuple = env.step(env.action_space.sample())

        if done := step_tuple[2]:
            env.reset()

    return make_frame


def generate_gif(
    env: Env,
    name: Union[str, Path],
    each: int = 1,
    updates: int = 50,
    duration_between: int = 50,
):
    make_frame = get_make_frame(env)
    frames = []

    for i in range(updates):
        if i % each == 0:
            frames.append(make_frame())

    if isinstance(name, str):
        folder = Path().cwd() / "gifs"
        folder.mkdir(exist_ok=True)
        path = folder / f"{name}.gif"

    gif.save(frames, str(path), duration=duration_between)


def generate_gif_envs(updates: int, duration_frame: int):
    prototypes = ["helicopter", "bulldozer", "advanced_bulldozer"]

    proto_id = 2
    name = prototypes[proto_id]
    ProtoEnv = gymca.prototypes[proto_id]
    env = ProtoEnv(nrows=42, ncols=42)

    generate_gif(
        env,
        name,
        updates=updates,
        duration_between=duration_frame,
    )


# CLI args
parser = argparse.ArgumentParser()
parser.description = (
    "Generate gif files sample for each of the gym_cellular_automata library"
)


parser.add_argument(
    "--steps",
    "-s",
    type=int,
    default=DEFAULT_UPDATES,
    help=f"Steps to play on the environment. {DEFAULT_UPDATES}",
)

parser.add_argument(
    "--duration",
    "-d",
    type=float,
    default=DEFAULT_MILISECOND_FRAME,
    help=f"Time elapsed in miliseconds between each frame of the animation. {DEFAULT_MILISECOND_FRAME}",
)


if __name__ == "__main__":
    args = parser.parse_args()

    gif.options.matplotlib["dpi"] = 200
    generate_gif_envs(args.steps, args.duration)
