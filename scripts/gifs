#!/usr/bin/env python
import argparse
import warnings
from pathlib import Path
from typing import Union

import gif
from gymnasium import Env, make
from gymnasium.error import NameNotFound
import moviepy as mp
from matplotlib._api.deprecation import MatplotlibDeprecationWarning
from tqdm import tqdm

import gym_cellular_automata as gymca

DEFAULT_UPDATES = 40
DEFAULT_MILISECOND_FRAME = 80


def get_make_frame(env: Env):
    env.reset()

    warnings.filterwarnings("ignore", category=MatplotlibDeprecationWarning)

    @gif.frame
    def make_frame():
        env.render()
        step_tuple = env.step(env.action_space.sample())

        if done := step_tuple[2]:
            env.reset()

    return make_frame


def generate_gif(
    env: Env,
    name: Union[str, Path],
    each: int = 1,
    updates: int = 50,
    duration_between: int = 50,
):
    if isinstance(name, str):
        # Create main gifs directory
        base_folder = Path().cwd() / "gifs"
        base_folder.mkdir(exist_ok=True)

        # Create env-specific subfolder
        env_folder = base_folder / name
        env_folder.mkdir(exist_ok=True)

        # Set paths for all files
        gif_path = env_folder / f"{name}.gif"
        mp4_path = env_folder / f"{name}.mp4"
        altitude_path = env_folder / f"{name}_altitude.png"
        density_path = env_folder / f"{name}_density.png"
        vegitation_path = env_folder / f"{name}_vegitation.png"
    if name == "advanced_bulldozer":
        # Generate and save altitude plot
        altitude_plot = env.altitude_render()
        altitude_plot.savefig(altitude_path)
        # altitude_plot.close()

        # Generate and save density plot
        density_plot = env.density_render()
        density_plot.savefig(density_path)

        vegitation_plot = env.vegitation_render()
        vegitation_plot.savefig(vegitation_path)

    import time

    start_time = time.time()

    make_frame = get_make_frame(env)
    frames = []

    for i in tqdm(range(updates), desc="Generating frames"):
        if i % each == 0:
            frames.append(make_frame())

    end_time = time.time()
    # Save gif and mp4
    print(f"Generation completed in {end_time - start_time:.2f} seconds")
    gif.save(frames, str(gif_path), duration=duration_between)
    clip = mp.VideoFileClip(str(gif_path))
    clip.write_videofile(mp4_path, fps=30, threads=1, codec="libx264")

    # density_plot.close()

    print(f"Generation completed in {end_time - start_time:.2f} seconds")


def generate_gif_envs(updates: int, duration_frame: int):
    prototypes = ["helicopter", "bulldozer", "advanced_bulldozer"]

    proto_id = 2
    name = prototypes[proto_id]
    ProtoEnv = gymca.prototypes[proto_id]
    env = ProtoEnv(nrows=200, ncols=200)

    generate_gif(
        env,
        name,
        updates=updates,
        duration_between=duration_frame,
    )


# CLI args
parser = argparse.ArgumentParser()
parser.description = (
    "Generate gif files sample for each of the gym_cellular_automata library"
)


parser.add_argument(
    "--steps",
    "-s",
    type=int,
    default=DEFAULT_UPDATES,
    help=f"Steps to play on the environment. {DEFAULT_UPDATES}",
)

parser.add_argument(
    "--duration",
    "-d",
    type=float,
    default=DEFAULT_MILISECOND_FRAME,
    help=f"Time elapsed in miliseconds between each frame of the animation. {DEFAULT_MILISECOND_FRAME}",
)


if __name__ == "__main__":
    args = parser.parse_args()

    gif.options.matplotlib["dpi"] = 200
    generate_gif_envs(args.steps, args.duration)
