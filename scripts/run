#!/usr/bin/env python
import argparse
import warnings
from pathlib import Path
from typing import Union

import gif
import jax
import moviepy as mp
from gymnasium import Env, make
from gymnasium.error import NameNotFound
from jax.lib import xla_bridge
from matplotlib._api.deprecation import MatplotlibDeprecationWarning
from tqdm import tqdm

import gym_cellular_automata as gymca
from gym_cellular_automata.agents.jax_ppo import run_rollout_loop

DEFAULT_UPDATES = 40
DEFAULT_MILISECOND_FRAME = 80


# Add at the beginning of the file, after imports
def get_default_device():
    """Get the default JAX device (GPU/TPU if available, else CPU)"""
    return xla_bridge.get_backend().platform


# Set default device platform
DEFAULT_PLATFORM = get_default_device()
print(f"Default platform: {DEFAULT_PLATFORM}")

# Configure JAX to use the default platform
jax.config.update("jax_platform_name", DEFAULT_PLATFORM)


def get_make_frame(env: Env, save_gif: bool):
    env.reset()

    warnings.filterwarnings("ignore", category=MatplotlibDeprecationWarning)

    @gif.frame
    def make_frame():
        if save_gif:
            env.render()
        step_tuple = env.step(env.action_space.sample())

        if step_tuple[2]:  # if done
            env.reset()

    return make_frame


def generate_gif(
    env: Env,
    name: Union[str, Path],
    each: int = 1,
    updates: int = 50,
    duration_between: int = 50,
    save_gif: bool = True,
):
    paths = {}
    if save_gif and isinstance(name, str):
        # Create main gifs directory
        base_folder = Path().cwd() / "gifs"
        base_folder.mkdir(exist_ok=True)

        # Create env-specific subfolder
        env_folder = base_folder / name
        env_folder.mkdir(exist_ok=True)

        # Set paths for all files
        paths = {
            "gif": env_folder / f"{name}.gif",
            "mp4": env_folder / f"{name}.mp4",
            "altitude": env_folder / f"{name}_altitude.png",
            "density": env_folder / f"{name}_density.png",
            "vegitation": env_folder / f"{name}_vegitation.png",
        }

    if save_gif and name == "advanced_bulldozer":
        # Generate and save altitude plot
        altitude_plot = env.altitude_render()
        altitude_plot.savefig(paths["altitude"])

        # Generate and save density plot
        density_plot = env.density_render()
        density_plot.savefig(paths["density"])

        vegitation_plot = env.vegitation_render()
        vegitation_plot.savefig(paths["vegitation"])

    import time

    start_time = time.time()

    make_frame = get_make_frame(env, save_gif)
    frames = []

    run_rollout_loop(env, updates)
    # for i in tqdm(range(updates), desc="Generating frames"):
    #     if i % each == 0:
    #         frames.append(make_frame())

    end_time = time.time()
    print(f"Generation completed in {end_time - start_time:.2f} seconds")

    if save_gif:
        gif.save(frames, str(paths["gif"]), duration=duration_between)
        clip = mp.VideoFileClip(str(paths["gif"]))
        clip.write_videofile(paths["mp4"], fps=30, threads=1, codec="libx264")

    print(f"Generation completed in {end_time - start_time:.2f} seconds")


def generate_gif_envs(updates: int, duration_frame: int, save_gif: bool = True):
    prototypes = ["helicopter", "bulldozer", "advanced_bulldozer"]

    proto_id = 2
    name = prototypes[proto_id]
    ProtoEnv = gymca.prototypes[proto_id]
    env = ProtoEnv(nrows=256, ncols=256)

    generate_gif(
        env,
        name,
        updates=updates,
        duration_between=duration_frame,
        save_gif=save_gif,
    )


# CLI args
parser = argparse.ArgumentParser()
parser.description = (
    "Generate gif files sample for each of the gym_cellular_automata library"
)


parser.add_argument(
    "--steps",
    "-s",
    type=int,
    default=DEFAULT_UPDATES,
    help=f"Steps to play on the environment. {DEFAULT_UPDATES}",
)

parser.add_argument(
    "--duration",
    "-d",
    type=float,
    default=DEFAULT_MILISECOND_FRAME,
    help=f"Time elapsed in miliseconds between each frame of the animation. "
    f"{DEFAULT_MILISECOND_FRAME}",
)

parser.add_argument(
    "--no-gif",
    action="store_true",
    help="Run without generating gif files",
)


if __name__ == "__main__":
    args = parser.parse_args()

    gif.options.matplotlib["dpi"] = 200
    generate_gif_envs(args.steps, args.duration, not args.no_gif)
